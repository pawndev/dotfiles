# Variables {{{
ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_YELLOW=$ESC_SEQ"33;01m"
COL_BLUE=$ESC_SEQ"34;01m"
COL_MAGENTA=$ESC_SEQ"35;01m"
COL_CYAN=$ESC_SEQ"36;01m"
# }}}

# Exports {{{
export TERM="xterm-256color"
export LC_CTYPE="en_US.UTF-8"
export VISUAL="nvim"
export EDITOR="nvim"
export BULLETTRAIN_EXEC_TIME_ELAPSED=1
export BULLETTRAIN_STATUS_EXIT_SHOW=true
export FZF_DEFAULT_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || \
   cat {} || tree -C {}) 2> /dev/null | head -200'"
export YSU_MODE=ALL
# zplug
export NVM_LAZY_LOAD=true
#Theme
prompt_vi_mode() {
  case ${KEYMAP} in
        (vicmd)      prompt_segment blue white "N" ; print -n -- "\E]50;CursorShape=0\C-G" ;;
        (main|viins) prompt_segment blue white "I" ; print -n -- "\E]50;CursorShape=2\C-G";;
        (*)          prompt_segment blue white "I" ; print -n -- "\E]50;CursorShape=2\C-G";;
    esac
}
export BULLETTRAIN_PROMPT_ORDER=(
  vi_mode
  time
  status
  custom
  context
  dir
  screen
  git
  cmd_exec_time
  go
)
# }}}

# Config {{{
setopt prompt_subst
# }}}

# Plugins {{{
source ~/.zplug/init.zsh

zplug 'zplug/zplug', hook-build:'zplug --self-manage'
zplug "zsh-users/zsh-history-substring-search"
zplug "zsh-users/zsh-syntax-highlighting", defer:2
zplug "zsh-users/zsh-autosuggestions"
zplug "rupa/z", use:z.sh
# zplug "junegunn/fzf", as:command, hook-build:"./install --bin", use:"bin/{fzf-tmux,fzf}"
zplug "plugins/docker-compose",   from:oh-my-zsh
zplug "plugins/git",   from:oh-my-zsh
zplug "plugins/vi-mode",   from:oh-my-zsh
zplug "plugins/docker",   from:oh-my-zsh
zplug "plugins/cp",   from:oh-my-zsh
#zplug "plugins/common-aliases",   from:oh-my-zsh
zplug "MichaelAquilina/zsh-you-should-use"
zplug "caiogondim/bullet-train.zsh", use:bullet-train.zsh-theme
zplug "lukechilds/zsh-nvm"

zplug load
# /zplug
# }}}

# Alias {{{
alias vi="nvim"
alias vim="nvim"
alias re-zsh="source ~/.zshrc"
alias zshrc="nvim ~/.zshrc"
alias vimrc="nvim ~/.config/nvim/init.vim"
# Common aliases
alias disk="df -H | grep -vE '^Filesystem|tmpfs|cdrom'"
alias :q="exit"
alias spotiplay="dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause"
alias spotinext="dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next"
alias spotiprev="dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous"
alias spotistop="dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Stop"
ls --color -d . &>/dev/null && alias ls='ls --color=tty' || { ls -G . &>/dev/null && alias ls='ls -G' }

alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'

alias -- -='cd -'
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'

alias md='mkdir -p'
alias rd=rmdir
alias d='dirs -v | head -10'

# List directory contents
alias lsa='ls -lah'
alias l='ls -lah'
alias ll='ls -lh'
alias la='ls -lAh'

# OuiCar's configuration
alias nodexec='docker exec -it frontend.node'
# }}}

# PluginConfig {{{
  # zsh-history-substring-search {{{
  bindkey '^[[A' history-substring-search-up
  bindkey '^[[B' history-substring-search-down
  # }}}

# }}}

# Functions {{{
function vzf() {
  local file=$(fzf)

  if [ -n "$file" ]; then
		${EDITOR:-vim} "$file"
	fi
}

function myip() {
    curl ipecho.net/plain; echo
}

function privateip() {
    ip -o route get 8.8.8.8 | sed -e 's/^.* src \([^ ]*\) .*$/\1/'
}

function showmem() {
    ps -eo size,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf("%13.2f Mb ",hr) } { for ( x=4 ; x<=NF ; x++ ) { printf("%s ",$x) } print "" }' | grep -v grep | grep $1
}

function ok() {
    echo -e "$COL_GREEN[ok]$COL_RESET "$1
}

function bot() {
    echo -e "\n$COL_GREEN\[._.]/$COL_RESET - "$1
}

function tableflip() {
    echo -e "\n$COL_GREEN(╯°□°）╯︵ ┻━┻$COL_RESET - "$1
}

function shrug() {
    echo -e "\n$COL_GREEN ¯\\_(ツ)_/¯ $COL_RESET - "$1
}

function unflip() {
  echo -e "\n$COL_GREEN ┬─┬ ノ( ゜-゜ノ)$COL_RESET - "$1
}

function running() {
    echo -en "$COL_YELLOW ⇒ $COL_RESET"$1": "
}

function action() {
    echo -e "\n$COL_YELLOW[action]:$COL_RESET\n ⇒ $1..."
}

function warn() {
    echo -e "$COL_YELLOW[warning]$COL_RESET "$1
}

function error() {
    echo -e "$COL_RED[error]$COL_RESET "$1
}

function seal() {
  echo -e "\n$COL_GREENᶘᵒᴥᵒᶅ$COL_RESET - "$1
}

# }}}

